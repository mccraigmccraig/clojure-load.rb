#!/usr/bin/env ruby

require 'optparse'

def follow_symlink(f)
  if File.symlink?(f)
    if (lnk = File.readlink(f))[0..0] != "/"
      File.join( File.dirname(f), lnk )
    else
      lnk
    end
  else
    f
  end
end
FILE = follow_symlink(__FILE__)

def parse_opts(argv)
  cp_elements = []
  options = { 
    :clj_home => File.join( File.dirname(FILE), "..", "clojure" ),
    :clj_root => File.join( File.dirname(FILE), ".." ),
    :java => "java", 
    :debug => false,
    :cp_elements => cp_elements
  }

  argv.options do |opts|
    opts.banner = "usage: clojure [options] -- [java_options] -- [script_options]"

    opts.on( "--home=CLOJURE_HOME", "clojure home dir" ) do |clj_home|
      options[:clj_home] = clj_home
    end
    
    opts.on( "--root=CLOJURE_ROOT", "root dir for clojure libs" ) do |clj_root|
      options[:clj_root] = clj_root
    end

    opts.on( "--java", "java runtime" ) do |java|
      options[:java] = java
    end

    opts.on( "-d", "--debug" ) do
      options[:debug] = true
    end

    opts.on( "-p", "--path=CLASSPATH_ELEMENT", "jar or dir path to go directly in classpath") do |cp_dir|
      cp_elements << [:path, cp_dir]
    end

    opts.on( "-l", "--lib=LIB_DIR", "clojure library dir containing lib/*.jar and one of LIB_DIR.jar or src/clj or src sub-dir" ) do |clj_lib|
      cp_elements << [:clj_lib, clj_lib]
    end

    opts.on( "-s", "--src_lib=LIB_DIR", "clojure source library dir containing lib/*.jar and one of src/clj or src sub-dir") do |clj_src|
      cp_elements << [:clj_src, clj_src]
    end

    opts.on( "-j", "--jardir=JAR_DIR", "dir containing *.jar files" ) do |jar_dir|
      cp_elements << [:jar_dir, jar_dir]
    end

    opts.parse!
  end

  options
end

def check_files_with(files, pred)
  files = [*files]
  f = files.find{ |file| file if File.send(pred, file) }
  raise "no match: File.#{pred.to_s} from #{files.inspect}" if ! f
  f
end

def check_dir(dir)
  check_files_with(dir, :directory?)
end

def check_file(f)
  check_files_with(f, :file?)
end

def check_exist(f)
  check_files_with(f, :exist?)
end

def clj_home(options)
  check_dir(options[:clj_home])
end

def clj_root(options)
  check_dir(options[:clj_root])
end

def expand_path(options, path)
  path.split(':').select{ |p| !p.empty? }.map{ |p| check_exist(p) }
end

def expand_jar_dir(options, dir)
  check_dir(dir)
  Dir[ File.join( dir, "*.jar") ]
end

def lib_dir(options, lib)
  if lib == File.basename( lib )
    libdir = File.join( clj_root(options), lib )
    [libdir,lib]
  else
    libdir = check_dir( lib )
    [libdir, File.basename(lib)]
  end
end

def expand_clj_src(options, lib)
  libdir,libname = lib_dir(options, lib)
  paths = [check_files_with([File.join( libdir, "src", "clj" ),
                             File.join( libdir, "src")],
                            :directory?)]
  if File.directory?(lib_jar_dir = File.join(libdir, "lib"))
    paths += expand_jar_dir(options, lib_jar_dir)
  end
  paths
end

def expand_clj_lib(options, lib)
  libdir,libname = lib_dir(options, lib)
  if File.exist?( jar=File.join(libdir, "#{libname}.jar" ) )
    paths = [jar]
    if File.directory?(lib_jar_dir = File.join(libdir, "lib"))
      paths += expand_jar_dir(options, lib_jar_dir)
    end
    paths
  else
    expand_clj_src(options, lib)
  end
end

def expand_classpath(options)
  paths = options[:cp_elements].map do |(type,cp)|
    p = self.send("expand_#{type.to_s}", options, cp)
  end.flatten

  paths += expand_clj_lib(options, clj_home(options))
end

def classpath(options)
  expand_classpath(options).map{ |p| File.expand_path(p) }.join(':')
end

def squish_argv(argv)
  argv.map{ |a| "\"#{a}\"" }.join(" ")
end

def launch_clojure(options)
  if i=ARGV.index( "--" )
    java_args = ARGV[0...i]
    clj_args = ARGV[i+1...ARGV.length]
  else
    java_args = []
    clj_args = ARGV
  end

  clj_class = if clj_args.length > 0 then  "clojure.lang.Script" else "clojure.lang.Repl" end
  cmd_line = "rlwrap #{options[:java]} -Dpid=#{Process.pid} #{squish_argv(java_args)} -cp #{classpath(options)} #{clj_class} #{squish_argv(clj_args)}"
  $stderr << cmd_line << "\n" if DEBUG
  exec( cmd_line )
end

options = parse_opts(ARGV)
DEBUG = options[:debug]
$stderr << "options: " << options.inspect << "\n" if DEBUG

launch_clojure(options)
